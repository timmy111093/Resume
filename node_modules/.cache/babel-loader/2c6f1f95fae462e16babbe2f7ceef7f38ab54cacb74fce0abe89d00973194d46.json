{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  employees: []\n};\nexport const employeeSlice = createSlice({\n  name: 'employees',\n  initialState: initialState,\n  reducers: {\n    setEmployees: (state, action) => {\n      // redux toolkit allows us to write mutating logic in the reducers\n      state.employees = action.payload;\n    },\n    setEmployee: (state, action) => {\n      const {\n        payload\n      } = action;\n      state.employee = payload;\n    },\n    addingEmployee: (state, _ref) => {\n      let {\n        payload: employee\n      } = _ref;\n      state.employees.push(employee);\n    },\n    updatingEmployee: (state, _ref2) => {\n      let {\n        payload: employee\n      } = _ref2;\n      const indexToUpdate = state.employees.findIndex(e => e.id === employee.id);\n      if (indexToUpdate >= 0) {\n        state.employees[indexToUpdate] = employee;\n      }\n      state.employee = employee;\n    },\n    removeEmployee: (state, _ref3) => {\n      let {\n        payload: id\n      } = _ref3;\n      const indexToDelete = state.employees.findIndex(e => e.id === id);\n      if (indexToDelete >= 0) {\n        state.employees.splice(indexToDelete, 1);\n      }\n    },\n    numOfEmployees: (state, action) => {\n      const mount = state.employees.length;\n      return mount;\n    }\n  }\n});\nexport const {\n  setEmployees,\n  setEmployee,\n  addingEmployee,\n  updatingEmployee,\n  removeEmployee\n} = employeeSlice.actions;\nexport default employeeSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","employees","employeeSlice","name","reducers","setEmployees","state","action","payload","setEmployee","employee","addingEmployee","_ref","push","updatingEmployee","_ref2","indexToUpdate","findIndex","e","id","removeEmployee","_ref3","indexToDelete","splice","numOfEmployees","mount","length","actions","reducer"],"sources":["/Users/timy1/Desktop/2.3.23 - ShoesStore/shoesStore/src/components/layoutArea/EmployeesArea/employeesSlice.ts"],"sourcesContent":["import {createSlice,PayloadAction} from '@reduxjs/toolkit';\nimport Employee from '../../../models/Employee';\n\ninterface EmployeeState{\n      employees: Employee[],\n      employee?: Employee\n}\n\nconst initialState:EmployeeState = {\n      employees:[]\n}\n\nexport const employeeSlice = createSlice({\n      name: 'employees',\n      initialState: initialState,\n      reducers: {\n            setEmployees: (state,action:PayloadAction<Employee[]>) => {\n                  // redux toolkit allows us to write mutating logic in the reducers\n                  state.employees = action.payload;\n            },\n            setEmployee:(state,action:PayloadAction<Employee>) => {\n                  const {payload} = action;\n                  state.employee = payload;\n            },\n\n            addingEmployee:(state,{payload:employee}:PayloadAction<Employee>) => {\n                  state.employees.push(employee);\n            },\n            updatingEmployee:(state,{payload:employee}:PayloadAction<Employee>) => {\n                  const indexToUpdate = state.employees.findIndex((e) => e.id === employee.id);\n                  if(indexToUpdate >= 0){\n                        state.employees[indexToUpdate] = employee;\n                  }\n                  state.employee = employee;\n            },\n            removeEmployee: (state,{payload:id}:PayloadAction<number>) => {\n                  const indexToDelete = state.employees.findIndex((e) => e.id === id);\n                  if(indexToDelete >= 0){\n                        state.employees.splice(indexToDelete,1);\n                  }\n            },\n            numOfEmployees: (state,action:PayloadAction<number>) => {\n                  const mount = state.employees.length;\n                  return mount;\n            }\n      }\n});\n\nexport const { setEmployees,setEmployee,addingEmployee,updatingEmployee,removeEmployee } = employeeSlice.actions;\n\nexport default employeeSlice.reducer;\n"],"mappings":"AAAA,SAAQA,WAAW,QAAqB,kBAAkB;AAQ1D,MAAMC,YAA0B,GAAG;EAC7BC,SAAS,EAAC;AAChB,CAAC;AAED,OAAO,MAAMC,aAAa,GAAGH,WAAW,CAAC;EACnCI,IAAI,EAAE,WAAW;EACjBH,YAAY,EAAEA,YAAY;EAC1BI,QAAQ,EAAE;IACJC,YAAY,EAAEA,CAACC,KAAK,EAACC,MAAgC,KAAK;MACpD;MACAD,KAAK,CAACL,SAAS,GAAGM,MAAM,CAACC,OAAO;IACtC,CAAC;IACDC,WAAW,EAACA,CAACH,KAAK,EAACC,MAA8B,KAAK;MAChD,MAAM;QAACC;MAAO,CAAC,GAAGD,MAAM;MACxBD,KAAK,CAACI,QAAQ,GAAGF,OAAO;IAC9B,CAAC;IAEDG,cAAc,EAACA,CAACL,KAAK,EAAAM,IAAA,KAAgD;MAAA,IAA/C;QAACJ,OAAO,EAACE;MAAgC,CAAC,GAAAE,IAAA;MAC1DN,KAAK,CAACL,SAAS,CAACY,IAAI,CAACH,QAAQ,CAAC;IACpC,CAAC;IACDI,gBAAgB,EAACA,CAACR,KAAK,EAAAS,KAAA,KAAgD;MAAA,IAA/C;QAACP,OAAO,EAACE;MAAgC,CAAC,GAAAK,KAAA;MAC5D,MAAMC,aAAa,GAAGV,KAAK,CAACL,SAAS,CAACgB,SAAS,CAAEC,CAAC,IAAKA,CAAC,CAACC,EAAE,KAAKT,QAAQ,CAACS,EAAE,CAAC;MAC5E,IAAGH,aAAa,IAAI,CAAC,EAAC;QAChBV,KAAK,CAACL,SAAS,CAACe,aAAa,CAAC,GAAGN,QAAQ;MAC/C;MACAJ,KAAK,CAACI,QAAQ,GAAGA,QAAQ;IAC/B,CAAC;IACDU,cAAc,EAAEA,CAACd,KAAK,EAAAe,KAAA,KAAwC;MAAA,IAAvC;QAACb,OAAO,EAACW;MAAwB,CAAC,GAAAE,KAAA;MACnD,MAAMC,aAAa,GAAGhB,KAAK,CAACL,SAAS,CAACgB,SAAS,CAAEC,CAAC,IAAKA,CAAC,CAACC,EAAE,KAAKA,EAAE,CAAC;MACnE,IAAGG,aAAa,IAAI,CAAC,EAAC;QAChBhB,KAAK,CAACL,SAAS,CAACsB,MAAM,CAACD,aAAa,EAAC,CAAC,CAAC;MAC7C;IACN,CAAC;IACDE,cAAc,EAAEA,CAAClB,KAAK,EAACC,MAA4B,KAAK;MAClD,MAAMkB,KAAK,GAAGnB,KAAK,CAACL,SAAS,CAACyB,MAAM;MACpC,OAAOD,KAAK;IAClB;EACN;AACN,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEpB,YAAY;EAACI,WAAW;EAACE,cAAc;EAACG,gBAAgB;EAACM;AAAe,CAAC,GAAGlB,aAAa,CAACyB,OAAO;AAEhH,eAAezB,aAAa,CAAC0B,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}